<h1>Pays#index</h1>
<p>Find me in app/views/pays/index.html.erb</p>
<script src="https://js.pay.jp/v2/pay.js"></script>
<style>
/* 必要に応じてフォームの外側のデザインを用意します */
div.payjs-outer {
  border: thin solid #198fcc;
}
</style>
<div id="number-form" class="payjs-outer"><!-- ここにカード番号入力フォームが生成されます --></div>
<div id="expiry-form" class="payjs-outer"><!-- ここに有効期限入力フォームが生成されます --></div>
<div id="cvc-form" class="payjs-outer"><!-- ここにCVC入力フォームが生成されます --></div>
<button onclick="onSubmit(event)">決済情報送信</button>
<%# <span id="token"></span> %>
<script>
// 公開鍵を登録し、起点となるオブジェクトを取得します
var payjp = Payjp('pk_test_b8adbef048e85a7963198a03')

// elementsを取得します。ページ内に複数フォーム用意する場合は複数取得ください
var elements4 = payjp.elements()

// 入力フォームを分解して管理・配置できます
var numberElement = elements4.create('cardNumber')
var expiryElement = elements4.create('cardExpiry')
var cvcElement = elements4.create('cardCvc')
numberElement.mount('#number-form')
expiryElement.mount('#expiry-form')
cvcElement.mount('#cvc-form')
const getCsrfToken = () => {
  const metaElem = document.querySelector("meta[name='csrf-token']")
  if (!metaElem) {
    throw Error("meta[name=csrf-token] is not founded.")
  }
  const csrfToken = metaElem.getAttribute("content")
  if (!csrfToken) {
    throw Error("csrf token is not set")
  }
  return csrfToken
}
// ボタンが押されたらtokenを生成する関数を用意します
async function onSubmit() {
  let token
  await payjp.createToken(numberElement).then(function(r) {
    token = r.id
  })
  axios.post('/pays', {
    token: token,
  },{
    headers: {
      'X-CSRF-TOKEN': getCsrfToken()
    }
  })
}
</script>
